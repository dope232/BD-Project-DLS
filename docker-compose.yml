# windows version uncomment 
# version: '3.8'

# volumes:
#   pinotController1:
#   pinotServer1:
#   elasticsearch_data:
#   flume_data:

# services:
#   zookeeper:
#     image: confluentinc/cp-zookeeper:7.4.0
#     hostname: zookeeper
#     container_name: zookeeper1
#     ports:
#       - "2181:2181"
#     environment:
#       ZOOKEEPER_CLIENT_PORT: 2181
#       ZOOKEEPER_TICK_TIME: 2000
#     healthcheck:
#       # Modified for Windows compatibility
#       test: ["CMD", "powershell", "-Command", "Test-NetConnection -ComputerName localhost -Port 2181"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   broker:
#     image: confluentinc/cp-kafka:7.4.0
#     hostname: broker
#     container_name: broker
#     depends_on:
#       zookeeper:
#         condition: service_healthy
#     ports:
#       - "9092:9092"
#       - "9101:9101"
#     environment:
#       KAFKA_BROKER_ID: 1
#       KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#       KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#       KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
#       KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
#       KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#       KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#       KAFKA_JMX_PORT: 9101
#       KAFKA_JMX_HOSTNAME: localhost
#     healthcheck:
#       # Modified for Windows compatibility
#       test: ["CMD", "powershell", "-Command", "Test-NetConnection -ComputerName localhost -Port 9092"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   nutrition-service:
#     image: python:3.9-slim
#     container_name: nutrition-service
#     volumes:
#       - ./services:/app/services
#       - ./requirements.txt:/app/requirements.txt
#     working_dir: /app
#     command: >
#       cmd /c "pip install -r requirements.txt && python -m services.nutrition"
#     depends_on:
#       flume:
#         condition: service_healthy
#     networks:
#       - default

#   workout-service:
#     image: python:3.9-slim
#     container_name: workout-service
#     volumes:
#       - ./services:/app/services
#       - ./requirements.txt:/app/requirements.txt
#     working_dir: /app
#     command: >
#       cmd /c "pip install -r requirements.txt && python -m services.workout"
#     depends_on:
#       flume:
#         condition: service_healthy
#     networks:
#       - default

#   flume:
#     image: probablyfine/flume:latest
#     container_name: flume
#     hostname: flume
#     ports:
#       - "41414-41419:41414-41419"
#     environment:
#       FLUME_AGENT_NAME: docker-agent
#       FLUME_JAVA_OPTS: "-Xms100m -Xmx2000m"
#     volumes:
#       - type: bind
#         source: ./flume-conf
#         target: /opt/flume/conf
#       - flume_data:/var/log/flume
#     depends_on:
#       broker:
#         condition: service_healthy
#       elasticsearch:
#         condition: service_healthy
#     networks:
#       - default
#     healthcheck:
#       # Modified for Windows compatibility
#       test: ["CMD", "powershell", "-Command", "Test-NetConnection -ComputerName localhost -Port 41414"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   elasticsearch:
#     image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
#     container_name: elasticsearch
#     hostname: elasticsearch
#     ports:
#       - "9200:9200"
#       - "9300:9300"
#     environment:
#       - discovery.type=single-node
#       - xpack.security.enabled=false
#       - ES_JAVA_OPTS=-Xms512m -Xmx512m
#     volumes:
#       - elasticsearch_data:/usr/share/elasticsearch/data
#     healthcheck:
#       # Modified for Windows compatibility
#       test: ["CMD", "powershell", "-Command", "Invoke-WebRequest http://localhost:9200/_cluster/health -UseBasicParsing"]
#       interval: 30s
#       timeout: 10s
#       retries: 3

#   kibana:
#     image: docker.elastic.co/kibana/kibana:8.11.0
#     container_name: kibana
#     hostname: kibana
#     ports:
#       - "5601:5601"
#     environment:
#       - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#     depends_on:
#       elasticsearch:
#         condition: service_healthy
#     healthcheck:
#       # Modified for Windows compatibility
#       test: ["CMD", "powershell", "-Command", "Invoke-WebRequest http://localhost:5601/api/status -UseBasicParsing"]
#       interval: 30s
#       timeout: 10s
#       retries: 3

# networks:
#   default:
#     driver: bridge

#linux version 
version: '3.8'

volumes:
  pinotController1:
  pinotServer1:
  elasticsearch_data:
  flume_data:

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  broker:
    image: confluentinc/cp-kafka:7.4.0
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: [ "CMD", "bash", "-c", 'nc -z localhost 9092' ]
      interval: 10s
      timeout: 5s
      retries: 5

  nutrition-service:
    image: python:3.9-slim
    container_name: nutrition-service
    volumes:
      - ./services:/app/services
      - ./requirements.txt:/app/requirements.txt
    working_dir: /app
    command: >
      bash -c "pip install -r requirements.txt && python -m services.nutrition"
    depends_on:
      flume:
        condition: service_healthy
    networks:
      - default

  workout-service:
    image: python:3.9-slim
    container_name: workout-service
    volumes:
      - ./services:/app/services
      - ./requirements.txt:/app/requirements.txt
    working_dir: /app
    command: >
      bash -c "pip install -r requirements.txt && python -m services.nutrition"
    depends_on:
      flume:
        condition: service_healthy
    networks:
      - default

  flume: #opens a tcp pocket to receive logs
      image: probablyfine/flume:latest
      container_name: flume
      hostname: flume
      ports:
        - "41414:41414" #41414 for logs 
        - "41415:41415" #41415 for heartbeat 
      environment:
        FLUME_AGENT_NAME: docker-agent
        FLUME_JAVA_OPTS: "-Xms100m -Xmx2000m"
      volumes:
        - ./flume-conf:/opt/flume/conf
        - flume_data:/var/log/flume
      depends_on:
        broker:
          condition: service_healthy
      networks:
        - default
      healthcheck:
        test: [ "CMD", "nc", "-z", "localhost", "41414" ]
        interval: 10s
        timeout: 5s
        retries: 5


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    hostname: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q 'status.:.' " ]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    hostname: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:5601/api/status | grep -q 'Looking good'" ]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  default:
    driver: bridge